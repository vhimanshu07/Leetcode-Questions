Question 3:- https://leetcode.com/contest/weekly-contest-349/problems/collecting-chocolates/

Solution :- 

class Solution {
public:
    long long minCost(vector<int>& nums, int x) {
            long long cost, cost1, l = 0, r = nums.size();
    while (l < r) {
        long long m = (l + r) / 2;
        cost = m * x, cost1 = (m + 1) * x;
        deque<int> d; 
        for (int i = 0; i < nums.size() + m + 1; ++i) {
            while (!d.empty() && d.back() > nums[i % nums.size()])
                d.pop_back();
            d.push_back(nums[i % nums.size()]);
            if (i >= m + 1) {
                cost1 += d.front();
                if (d.front() == nums[i - m - 1])
                    d.pop_front();
            }
            if (i >= m && i < nums.size() + m)
                cost += d.front();
        }
        if (cost > cost1)
            l = m + 1;
        else
            r = m;
    }
    return min(cost, cost1);
    }
};
