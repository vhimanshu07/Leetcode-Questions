
Question no :-1 https://leetcode.com/problems/sum-of-squares-of-special-elements/

Solution :- 
class Solution {
    public int sumOfSquares(int[] nums) {
        int s=0;
        int f=1;
        for(int e:nums)
        {
            if(nums.length%f==0)
            {
                s+= e*e;
            }
            f++;
        }
        return s;
        
    }
}


Question 2:- https://leetcode.com/contest/weekly-contest-354/problems/maximum-beauty-of-an-array-after-applying-operation/

Solution :- 
class Solution {
public:
    int maximumBeauty(vector<int>& nums, int k) {
         vector<pair<int,int>> events;
        for(auto ele : nums)
        {
            events.push_back({ele-k,-1});
            events.push_back({ele+k,1});
        }
        
        int ans=0;
        int curr=0;
        
        sort(events.begin(),events.end());
        for(auto &[val,type] : events)
        {
            curr-=type;
            ans=std::max(ans,curr);
        }
        
        return ans;
    }
};


Question 3:- https://leetcode.com/contest/weekly-contest-354/problems/minimum-index-of-a-valid-split/


Solution:- 


class Solution {
public:
    int minimumIndex(vector<int>& nums) {
         int n = nums.size();
        map<int, int> cnt;
        for(auto &i: nums)  cnt[i]++;
        int x = nums[0];
        for(auto &[u, v]: cnt) {
            if(v > cnt[x])
                x = u;
        }
        int val = cnt[x], bf = 0;
        if(val * 2 == n + 1)    return -1;
        for(int i = 0 ; i < n - 1 ; i++) {
            if(x == nums[i])    bf++;
            if(bf * 2 > i + 1)  return i;
        }
        return -1;
        
    }
};
