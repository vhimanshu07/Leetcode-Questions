
    List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {

        // Your code here
        ArrayList<ArrayList<Integer>>gr=new ArrayList<>();
        for(int i=0;i<V;i++){
            gr.add(new ArrayList<>());
        }
        int indegree[]=new int[V];
        for(int i=0;i<adj.size();i++){
            for(int item:adj.get(i)){
                gr.get(item).add(i);
                indegree[i]++;
            }
        }
        Queue<Integer>q=new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.offer(i);
            }
        }
        List<Integer>ans=new ArrayList<>();
        while(!q.isEmpty()){
            int rem=q.poll();
            ans.add(rem);
            for(int nei:gr.get(rem)){
                indegree[nei]--;
                if(indegree[nei]==0){
                    q.offer(nei);
                }
            }
        }
        Collections.sort(ans);
        return ans;
    }
