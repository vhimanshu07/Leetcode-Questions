List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {

        // Your code here
        boolean []pathvis,vis;
        pathvis=new boolean [V];
        vis=new boolean [V];
        List<Integer>ans=new ArrayList<>();
        int []check=new int[V];
        for(int i=0;i<V;i++){
            if(!vis[i]){
                dfs(i,vis,pathvis,adj,check);
            }
        }
        for(int i=0;i<V;i++){
            if(check[i]==1)
            ans.add(i);
        }
        return ans;
       
    }
    public boolean dfs(int cur, boolean []vis, boolean []pathvis,
     List<List<Integer>> adj,int[]check){
        pathvis[cur]=true;
        vis[cur]=true;
        check[cur]=0;
        for(int nei:adj.get(cur)){
            
            if(!vis[nei]){
            
                if(dfs(nei,vis,pathvis,adj,check)){
                        // if it detects cycle in it's path
                        check[nei]=0;
                        return true;
                }
            }
            else if(pathvis[nei]){
                // Found cycle
                check[nei]=0;
                return true;
            }
            
        }
        pathvis[cur]=false;
        check[cur]=1;
        return false;
        
        
         
     }


