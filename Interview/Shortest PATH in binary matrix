class Solution {
     class pair
     {
         int x,y,st;
         pair(int a,int b,int c)
         {
             x=a;
             y=b;
             st=c;
         }
     }
    int d[][]={{-1,0},{1,0},{0,-1},{0,1},{1,1},{1,-1},{-1,-1},{-1,1}};
    public int shortestPathBinaryMatrix(int[][] grid) {
        Queue<pair>q=new LinkedList<>();
        if(grid[0][0]==1)
            return -1;
        q.offer(new pair(0,0,1));
        int n=grid.length;
        int m=grid[0].length;
        boolean[][]vis=new boolean[n][m];
        while(!q.isEmpty())
        {
            pair rem=q.poll();
            if(rem.x==n-1&&rem.y==m-1)
            {
                return rem.st;
            }
            vis[rem.x][rem.y]=true;
    
            for(int i=0;i<8;i++)
            {
                int cr=rem.x+d[i][0];
                int cc=rem.y+d[i][1];
                if(cr>=0&&cc>=0&&cr<n&&cc<m&&!vis[cr][cc]&&grid[cr][cc]!=1)
                {
                    vis[cr][cc]=true;
                    q.offer(new pair(cr,cc,rem.st+1));
                }
            }
            
        }
        return -1;
    }
}



https://leetcode.com/problems/shortest-path-in-binary-matrix/description/
