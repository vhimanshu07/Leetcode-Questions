class Solution {
    public int[] findOrder(int n, int[][] p) {
       // Kahn's algorithm
        int []indegree=new int[n];
        ArrayList<ArrayList<Integer>>gr=new ArrayList<>();
        for(int i=0;i<n;i++){
            gr.add(new ArrayList<>());
        }

        for(int i=0;i<p.length;i++){
            int a=p[i][0];
            int b=p[i][1];
            indegree[a]++;
            gr.get(b).add(a);
        }
        Queue<Integer>q=new LinkedList<>();
        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.offer(i);
            }
        }
        ArrayList<Integer>ans= new ArrayList<>();
        while(!q.isEmpty()){
            int rem=q.poll();
            ans.add(rem);
            for(int nei:gr.get(rem)){
                indegree[nei]--;
                if(indegree[nei]==0)
                q.offer(nei);
            }

            
        }
       if(ans.size()==n){
        int e[]=new int[ans.size()];
        for(int i=0;i<ans.size();i++){
            e[i]=ans.get(i);
        }
        return e;
       }
       return new int[]{};
    }
}


https://leetcode.com/problems/course-schedule-ii/
