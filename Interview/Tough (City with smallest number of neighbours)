class Solution {
        static class pair{
            int v, wt;
            pair(int v,int wt){
                this.v=v;
                this.wt=wt;
            }
        }
      int findCity(int n, int m, int[][] edges,int d)
      {
          //code here
          ArrayList<ArrayList<pair>>gr=new ArrayList<>();
          for(int i=0;i<n;i++){
            gr.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            int[]cur=edges[i];
            gr.get(cur[0]).add(new pair(cur[1],cur[2]));
            gr.get(cur[1]).add(new pair(cur[0],cur[2]));
        }
        int cost[]=new int[n+1];
        PriorityQueue<pair>q=new PriorityQueue<>(new Comparator<pair>(){
            public int compare(pair a,pair b){
                return a.wt-b.wt;
            }
        });
        int minCount=Integer.MAX_VALUE,ans=0;
        for(int i=0;i<n;i++){
            Arrays.fill(cost,Integer.MAX_VALUE);
            cost[i]=0;
              q.offer(new pair(i,0));
                while(!q.isEmpty()){
                    pair rem=q.poll();
                    
                    for(pair nei:gr.get(rem.v)){
                        int curcost=cost[nei.v];
                        int newcost=cost[rem.v]+nei.wt;
                        if(newcost<curcost){
                            cost[nei.v]=newcost;
                            q.offer(new pair(nei.v,newcost));
                          
                        }
                       
                    }
                }
                 int c=0;
        for(int k=0;k<n;k++){
           if(cost[k]<=d){
              c++; 
           }
        }
        if(c<=minCount){
            minCount=c;
            ans=i;
        }
       
        }
       
        return ans;
      
          
      }
}



https://www.geeksforgeeks.org/problems/city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/0
